import gi
import os
import subprocess
from pathlib import Path

gi.require_version("Gtk", "3.0")
from gi.repository import Gtk, GdkPixbuf, GtkCssProvider, Gdk, GtkStyleContext

# Paths
WALLPAPER_DIR = Path.home() / "Pictures"
CONFIG_FILES = {
    "Hyprland": Path.home() / ".config" / "hypr" / "hyprland.conf",
    "Waybar Style": Path.home() / ".config" / "waybar" / "style.css",
    "Waybar Config": Path.home() / ".config" / "waybar" / "config",
    "MangoHud": Path.home() / ".config" / "MangoHud" / "MangoHud.conf",
    "Kitty": Path.home() / ".config" / "kitty" / "kitty.conf",
    "Fastfetch": Path.home() / ".config" / "fastfetch" / "config.jsonc"
}
LOGO_PATH = Path.home() / "Pictures" / "logogirl.png"

class MenuApp(Gtk.Window):
    def __init__(self):
        Gtk.Window.__init__(self, title="Hyprland Menu")
        self.set_border_width(10)
        self.set_default_size(600, 400)

        # Apply custom CSS for #ff00ff text color
        self.apply_css()

        # Create Notebook for tabs
        self.notebook = Gtk.Notebook()
        self.add(self.notebook)

        # Add tabs
        self.create_edit_configs_tab()
        self.create_change_wallpaper_tab()
        self.create_system_info_tab()
        self.create_update_tab()

    def apply_css(self):
        """Applies #ff00ff color to all text in the application using CSS."""
        css_provider = Gtk.CssProvider()
        css_provider.load_from_data(b"""
        * {
            color: #ff00ff;
        }
        """)
        screen = Gdk.Screen.get_default()
        style_context = Gtk.StyleContext()
        style_context.add_provider_for_screen(screen, css_provider, Gtk.STYLE_PROVIDER_PRIORITY_APPLICATION)

    def create_edit_configs_tab(self):
        """Creates the 'Edit Configs' tab."""
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)

        for name, path in CONFIG_FILES.items():
            button = Gtk.Button(label=f"Edit {name}")
            button.connect("clicked", self.on_edit_config_clicked, path)
            box.pack_start(button, True, True, 0)

        self.notebook.append_page(box, Gtk.Label(label="Edit Configs"))

    def on_edit_config_clicked(self, widget, config_path):
        """Opens the config file in vim, with fallbacks to nano and nvim."""
        for editor in ['vim', 'nvim', 'nano']:
            try:
                subprocess.run([editor, str(config_path)])
                break
            except FileNotFoundError:
                continue

    def create_change_wallpaper_tab(self):
        """Creates the 'Change Wallpaper' tab."""
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)

        wallpaper_files = [f for f in WALLPAPER_DIR.iterdir() if f.is_file()]
        for wallpaper in wallpaper_files:
            button = Gtk.Button(label=f"Set {wallpaper.name}")
            button.connect("clicked", self.on_change_wallpaper_clicked, wallpaper)
            box.pack_start(button, True, True, 0)

        self.notebook.append_page(box, Gtk.Label(label="Change Wallpaper"))

    def on_change_wallpaper_clicked(self, widget, wallpaper_path):
        """Sets the selected wallpaper using swaybg."""
        # Kill any existing swaybg processes to avoid conflict
        subprocess.run(['pkill', 'swaybg'])

        # Start swaybg in the background using Popen so it doesn't block the GTK loop
        subprocess.Popen(['swaybg', '-o', 'HDMI-A-1', '-i', str(wallpaper_path)])

    def create_system_info_tab(self):
        """Creates the 'System Information' tab."""
        box = Gtk.Box(orientation=Gtk.Orientation.HORIZONTAL, spacing=6)

        # Add logo image
        if LOGO_PATH.exists():
            logo = Gtk.Image()
            pixbuf = GdkPixbuf.Pixbuf.new_from_file_at_scale(str(LOGO_PATH), 150, 150, True)
            logo.set_from_pixbuf(pixbuf)
            box.pack_start(logo, False, False, 0)

        # Add system information text
        sysinfo_box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)

        sysinfo = self.get_system_info()
        for key, value in sysinfo.items():
            label = Gtk.Label(label=f"{key}: {value}")
            label.set_xalign(0)
            sysinfo_box.pack_start(label, True, True, 0)

        box.pack_start(sysinfo_box, True, True, 0)
        self.notebook.append_page(box, Gtk.Label(label="System Information"))

    def get_system_info(self):
        """Returns basic system information including CPU and GPU models."""
        # Get system information from uname
        uname = os.uname()
        hostname = uname.nodename
        os_version = uname.sysname + " " + uname.release
        kernel = uname.release

        # Get CPU model from /proc/cpuinfo
        with open("/proc/cpuinfo") as f:
            cpu_info = [line.strip() for line in f if "model name" in line]
            cpu_model = cpu_info[0].split(":")[1].strip() if cpu_info else "Unknown CPU"

        # Get GPU model using lspci command
        gpu_info = subprocess.run(['lspci'], capture_output=True, text=True).stdout
        gpu_model = [line for line in gpu_info.splitlines() if "VGA compatible controller" in line]
        gpu_model = gpu_model[0].split(":")[2].strip() if gpu_model else "Unknown GPU"

        return {
            "Hostname": hostname,
            "OS Version": os_version,
            "Kernel": kernel,
            "CPU Model": cpu_model,
            "GPU Model": gpu_model
        }

    def create_update_tab(self):
        """Creates the 'Update' tab with buttons for Arch and Yay updates."""
        box = Gtk.Box(orientation=Gtk.Orientation.VERTICAL, spacing=6)

        # Button to update Arch using sudo pacman -Syyuu
        button_arch = Gtk.Button(label="Update Arch (sudo pacman -Syyuu)")
        button_arch.connect("clicked", self.on_update_arch_clicked)
        box.pack_start(button_arch, True, True, 0)

        # Button to update Yay packages using cd yay && yay -Syyuu
        button_yay = Gtk.Button(label="Update Yay (cd yay && yay -Syyuu)")
        button_yay.connect("clicked", self.on_update_yay_clicked)
        box.pack_start(button_yay, True, True, 0)

        self.notebook.append_page(box, Gtk.Label(label="Update"))

    def on_update_arch_clicked(self, widget):
        """Runs sudo pacman -Syyuu to update Arch Linux using Kitty."""
        subprocess.Popen(['kitty', '--hold', 'bash', '-c', 'sudo pacman -Syyuu'])

    def on_update_yay_clicked(self, widget):
        """Runs cd yay && yay -Syyuu to update Yay packages using Kitty."""
        subprocess.Popen(['kitty', '--hold', 'bash', '-c', 'cd yay && yay -Syyuu'])

# Start the GTK application
win = MenuApp()
win.connect("destroy", Gtk.main_quit)
win.show_all()
Gtk.main()

